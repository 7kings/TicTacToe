/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'hafthor' at '10/29/14 3:14 PM' with Gradle 2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

buildscript { 
  repositories {
    jcenter()
  }  
  dependencies {
    classpath 'org.ysb33r.gradle:doxygen:0.2'
  }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'org.ysb33r.doxygen'

mainClassName = "is.kings.TicTacToeWeb"
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
sourceSets {
    selenium
    seleniumXvfb
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'com.sparkjava:spark-core:1.1.1'

    seleniumCompile 'junit:junit:4.11'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'

    seleniumXvfbCompile 'junit:junit:4.11'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}
task selenium(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

    doFirst {
        switch(ant.properties.os) {
            case 'unix':
                'build/install/TicTacToe/bin/TicTacToe &'.execute()
                break
            case 'windows':
                'build\\install\\TicTacToe\\bin\\TicTacToe.bat'.execute()
                break
        }
    }
}

task seleniumXvfb(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        'bin/xvfb start'.execute()
        'build/install/TicTacToe/bin/TicTacToe &'.execute()
    }
    
    doLast {
        'bin/xvfb stop'.execute()
    }
}

jar{
	manifest{
		attributes("Main-Class": "is.kings.TicTacToe")
	}
}
task stage { dependsOn clean,  installApp }

jacocoTestReport{
   executionData test, seleniumXvfb
   
   reports {

	xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
   }
}
task mergedData(type: JacocoMerge) {
    // can pass in any task set up for Jacoco
    executionData test, seleniumXvfb
}
task jacocoReport(type: JacocoReport) {
    // can include one or more execution files
    executionData test, seleniumXvfb

   reports {

        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoMerge"
   }
    // specify one or more source sets that you want to report on the coverage of
    sourceSets project.sourceSets.main

    // can also specify additional class and source dirs
    // additionalClassDirs moreStuff
    // additionalSourceDirs moreSourceStuff
}
doxygen{
 generate_html true
 generate_latex false
 exclude 'TicTacToe.java', 'TicTacToeWeb.java'
 source new File(projectDir, 'src/main/java/is/kings') 
 template 'Doxyfile'
}

